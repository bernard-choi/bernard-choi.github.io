---
layout: post
title: "[Python] 다리를지나는트럭"
subtitle: "[Python] 다리를지나는트럭"
categories: Algorithm
tags: 문제풀이 Stack
comments: true
---

## 문제

트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

![다리를지나는트럭](https://bernard-choi.github.io/assets/img/post_img/다리를지나는트럭.jpg)

따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

## 제한사항

- bridge_length는 1 이상 10,000 이하입니다.
- weight는 1 이상 10,000 이하입니다.
- truck_weights의 길이는 1 이상 10,000 이하입니다.
- 모든 트럭의 무게는 1 이상 weight 이하입니다.


## 입출력 예

![다리를지나는트럭2](https://bernard-choi.github.io/assets/img/post_img/다리를지나는트럭2.jpg)

## 입출력 예 설명

문제에 나온 예와 같습니다.

## 풀이

stack 자료구조를 이용하여 풀 수 있습니다. list.pop(0)을 통해서도 첫번째 원소를 가지고 올 수 있으나, 이때 시간복잡도는 n입니다. 반면 deque에서 popleft()를 할때는 시간복잡도를 1로 단축시킬 수 있습니다.

- 시작할때 bridge_length의 길이를 가진 stack을 만듭니다. (0으로 채워진)
- 트럭이 들어올 경우 총 무게가 weight보다 작다면 stack에 추가를 합니다.
- 이때 sum(bridge)를 쓸 경우, 시간초과가 뜨기 때문에 bridge의 합을 가지는 int값을 매번 계산하여 시간을 줄일 수 있습니다.


```python
from collections import deque

def solution(bridge_length, weight, truck_weights):
    truck_weights = deque(truck_weights)
    bridge = deque([0]*(bridge_length)) # list의 pop(0)는 O(n) 반면, deque 자료구조의 leftpop()은 O(1) 이다.
    time = 0
    sum_bridge = 0 # sum(bridge) 대신 계산 과정에서 bridge를 매번 계산하여 넘긴다.

    while bridge:
        time += 1
        sum_bridge -= bridge[0]
        bridge.popleft()
        if truck_weights:
            sum_bridge += truck_weights[0]
            if sum_bridge <= weight:
                bridge.append(truck_weights.popleft())
            else:
                bridge.append(0)
                sum_bridge -= truck_weights[0]

    return time
```
