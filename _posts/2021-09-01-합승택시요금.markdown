---  
layout: post  
title: "[Python] 합승 택시 요금"  
subtitle: "[Python] 합승 택시 요금"  
categories: Algorithm
tags: 문제풀이 다익스트라 dijkstra
comments: true  
---  

## [프로그래머스 합승 택시 요금](https://programmers.co.kr/learn/courses/30/lessons/72413)

## 문제 설명

지원자가 지원서에 입력한 4가지의 정보와 획득한 코딩테스트 점수를 하나의 문자열로 구성한 값의 배열 info, 개발팀이 궁금해하는 문의조건이 문자열 형태로 담긴 배열 query가 매개변수로 주어질 때,
각 문의조건에 해당하는 사람들의 숫자를 순서대로 배열에 담아 return 하도록 solution 함수를 완성해 주세요.

![합승택시요금1](https://yunsikus.github.io/assets/img/post_img/합승택시요금1.jpg)

위 예시 그림은 택시가 이동 가능한 반경에 있는 6개 지점 사이의 이동 가능한 택시노선과 예상요금을 보여주고 있습니다.
그림에서 A와 B 두 사람은 출발지점인 4번 지점에서 출발해서 택시를 타고 귀가하려고 합니다. A의 집은 6번 지점에 있으며 B의 집은 2번 지점에 있고 두 사람이 모두 귀가하는 데 소요되는 예상 최저 택시요금이 얼마인 지 계산하려고 합니다.

- 그림의 원은 지점을 나타내며 원 안의 숫자는 지점 번호를 나타냅니다.
    - 지점이 n개일 때, 지점 번호는 1부터 n까지 사용됩니다.
- 지점 간에 택시가 이동할 수 있는 경로를 간선이라 하며, 간선에 표시된 숫자는 두 지점 사이의 예상 택시요금을 나타냅니다.
    - 간선은 편의 상 직선으로 표시되어 있습니다.
    - 위 그림 예시에서, 4번 지점에서 1번 지점으로(4→1) 가거나, 1번 지점에서 4번 지점으로(1→4) 갈 때 예상 택시요금은 10원으로 동일하며 이동 방향에 따라 달라지지 않습니다.
- 예상되는 최저 택시요금은 다음과 같이 계산됩니다.
    - 4→1→5 : A, B가 합승하여 택시를 이용합니다. 예상 택시요금은 10 + 24 = 34원 입니다.
    - 5→6 : A가 혼자 택시를 이용합니다. 예상 택시요금은 2원 입니다.
    - 5→3→2 : B가 혼자 택시를 이용합니다. 예상 택시요금은 24 + 22 = 46원 입니다.
    - A, B 모두 귀가 완료까지 예상되는 최저 택시요금은 34 + 2 + 46 = 82원 입니다.

## 문제

지점의 개수 n, 출발지점을 나타내는 s, A의 도착지점을 나타내는 a, B의 도착지점을 나타내는 b, 지점 사이의 예상 택시요금을 나타내는 fares가 매개변수로 주어집니다. 이때, A, B 두 사람이 s에서 출발해서 각각의 도착 지점까지 택시를 타고 간다고 가정할 때, 최저 예상 택시요금을 계산해서 return 하도록 solution 함수를 완성해 주세요.
만약, 아예 합승을 하지 않고 각자 이동하는 경우의 예상 택시요금이 더 낮다면, 합승을 하지 않아도 됩니다.

## 제한사항

- 지점갯수 n은 3 이상 200 이하인 자연수입니다.
- 지점 s, a, b는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
    - 즉, 출발지점, A의 도착지점, B의 도착지점은 서로 겹치지 않습니다.
- fares는 2차원 정수 배열입니다.
- fares 배열의 크기는 2 이상 n x (n-1) / 2 이하입니다.
    - 예를들어, n = 6이라면 fares 배열의 크기는 2 이상 15 이하입니다. (6 x 5 / 2 = 15)
    - fares 배열의 각 행은 [c, d, f] 형태입니다.
    - c지점과 d지점 사이의 예상 택시요금이 f원이라는 뜻입니다.
    - 지점 c, d는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
    - 요금 f는 1 이상 100,000 이하인 자연수입니다.
    - fares 배열에 두 지점 간 예상 택시요금은 1개만 주어집니다. 즉, [c, d, f]가 있다면 [d, c, f]는 주어지지 않습니다.
- 출발지점 s에서 도착지점 a와 b로 가는 경로가 존재하는 경우만 입력으로 주어집니다.

## 입출력 예

![합승택시요금2](https://yunsikus.github.io/assets/img/post_img/합승택시요금2.jpg)

## 입출력 예 설명

**입출력 예 #1**
문제 예시와 같습니다.

**입출력 예 #2**
![합승택시요금3](https://yunsikus.github.io/assets/img/post_img/합승택시요금3.jpg)

- 합승을 하지 않고, B는 3→2→1, A는 3→6→4 경로로 각자 택시를 타고 가는 것이 최저 예상 택시요금입니다.

- 따라서 최저 예상 택시요금은 (3 + 6) + (1 + 4) = 14원 입니다.

**입출력 예 #3**
![합승택시요금4](https://yunsikus.github.io/assets/img/post_img/합승택시요금4.jpg)

A와 B가 4→6 구간을 합승하고 B가 6번 지점에서 내린 후, A가6→5` 구간을 혼자 타고 가는 것이 최저 예상 택시요금입니다.
따라서 최저 예상 택시요금은 7 + 11 = 18원 입니다.

## 풀이

출발지를 S, 사람 a의 목적지를 A, 사람 b의 목적지를 B, 마지막 합승에서 하차하는 지점을 C라고 합시다. 우리는 S~C 구간, C~A 구간, C~B 구간의 합이 최소화되는 값을 찾는것이 목적입니다. S가 위치할 수 있는 모든 경우의 수를 고려하고 최단 거리 알고리즘인 다익스트라를 이용하여 각각의 구간의 합을 구합니다. 구간의 합이 최소인 경우를 answer로 리턴하면 됩니다. 

```python
import heapq
import sys

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}  # start로 부터의 거리 값을 저장하기 위함
    distances[start] = 0  # 시작 값은 0이어야 함
    queue = []
    heapq.heappush(queue, [distances[start], start])  # 시작 노드부터 탐색 시작 하기 위함.

    while queue:  # queue에 남아 있는 노드가 없으면 끝
        current_distance, current_destination = heapq.heappop(queue)  # 탐색 할 노드, 거리를 가져옴.

        if distances[current_destination] < current_distance:  
      # 현재 노드가 이미 처리된 노드라면 
      # 기존에 있는 거리보다 길다면, 볼 필요도 없음
            continue

        for new_destination, new_distance in graph[current_destination].items():
            distance = current_distance + new_distance  # 해당 노드를 거쳐 갈 때 거리
            if distance < distances[new_destination]:  # 알고 있는 거리 보다 작으면 갱신
                distances[new_destination] = distance
                heapq.heappush(queue, [distance, new_destination])  # 다음 인접 거리를 계산 하기 위해 큐에 삽입

    return distances

def solution(n, s, a, b, fares):
    graph = {}
    for i  in range(1, n+1):
        graph[i] = {}

    for fare in fares:
        tmp = graph[fare[0]]
        tmp[fare[1]] = fare[2]
        tmp2 = graph[fare[1]]
        tmp2[fare[0]] = fare[2]
        graph[fare[0]] = tmp
        graph[fare[1]] = tmp2

    min_v = sys.maxsize
    for w in range(1,n+1):
        w_dist = dijkstra(graph, s)[w]
        a_dist = dijkstra(graph, w)[a]
        b_dist = dijkstra(graph, w)[b]
        sum = w_dist + a_dist + b_dist
        if sum < min_v:
            min_v = sum
    return min_v
```