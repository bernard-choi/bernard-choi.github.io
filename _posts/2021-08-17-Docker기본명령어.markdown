---
layout: post
title: "[Docker] 도커 기본 명령어"
subtitle: "[Docker] 도커 기본 명령어"
categories: Development
tags: Docker
comments: true


---

## 도커 기본 명령어

### 도커 버전 확인하기

```shell
$sudo docker version
```

### 도커 시스템 정보 확인

```shell
$sudo docker system info
```

### 컨테이너 실행

**1) 대화형 컨테이너 실행**

```shell
sudo docker container run --interactive -tty --name centos centos:latest
sudo docker container run -i -t --name centos centos:latest
sudo docker container run -it --name centos centos:latest
```
- 위 세 가지 명령은 모두 같은 의미이며, 축약형 옵션의 사용여부에만 차이가 있다. 
- `--interactive, -i` 표준 입력창을 연다
- `--tty, -t` 장치에 tty를 할당한다.
- --tty, --interactive를 붙여야 터미널에서 명령어를 통해 컨테이너 제어가 가능하다. 
- `--name` 컨테이너의 이름을 세팅한다. (이 옵션 미사용시 영어 단어를 임의로 조합하여 랜담하게 세팅) 
- 원격 접속을 종료하려면 `exit`명령어를 입력하면 됨

**2) 백그라운드 컨테이너 실행**

```shell
sudo docker container run -d -p 80:80 --name apache httpd:latest
```

- `--detach, -d` 백그라운드에서 컨테이너를 실행
- `--publish, -p` 호스트/컨테이너 포트포워딩을 세팅

- 명령어를 해석해보면 컨테이너를 "백그라운드"에서 실행하고 "호스트의 80번 포트를 컨테이너의 80번 포트로 포워딩" 한다는 뜻
- 실행 대상 이미지는 httpd의 최신버전이고 컨테이너의 이름은 apache로 붙인다. 

## 자주 쓰는 컨테이너 명령

1) `run` - 컨테이너 생성 & 실행
```shell
sudo docker container run -d -p 80:80 --name apache httpd:latest
```

2) `stop` - 컨테이너 중지
```shell
sudo docker container stop apache
```

3) `start` - 컨테이너 시작. stop된 컨테이너에서는 run이 아닌 start를 해줘야됨


```shell
sudo docker container restart apache
```

4) `restart` 컨테이너 재시작
   
```shell
sudo docker container restart apache
```

5) `stats` - 컨테이너 구동 확인

```shell
sudo docker container stats apache
```

```shell
sudo docker container stats apache --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
```