---
layout: post
title: "[Python] 기능개발"
subtitle: "[Python] 기능개발"
categories: Algorithm
tags: 문제풀이 스택 큐 Stack Queue
comments: true


---
## [프로그래머스 기능개발](https://programmers.co.kr/learn/courses/30/lessons/42586)

## 문제

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

## 제한사항

- 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.
- 작업 진도는 100 미만의 자연수입니다.
- 작업 속도는 100 이하의 자연수입니다.
- 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.


## 입출력 예
![기능개발1](https://bernard-choi.github.io/assets/img/post_img/기능개발1.jpg)

## 입출력 설명

**입출력 예 #1**

첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

**입출력 예 #2**

모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.

## 풀이

- 먼저 각 작업의 완성 날짜를 구하여 `complete`라는 리스트 안에 담는다.
- 첫번째 원소를 계속해서 삭제하는 작업이기 때문에 리스트가 아닌 deque() 자료구조로 변환한다.
  - 리스트의 `pop(0)`의 시간복잡도는 `O(N)`이고 deque의 `pop()`은 시간복잡도 `O(1)`이다.
- queue에 값이 없을 때까지 반복문을 돕니다. `answer`에 들어갈 각 원소값 `n`을 1로 초기화합니다.
- queue의 첫번째 원소를 추출하고(val) 다시 queue의 첫번쨰 원소(queue[0])와 비교합니다.
- val이 queue보다 크거나 같으면 뒤에 있는 작업이 미리 완성된 경우이므로 `n`에 1을 더해줍니다.
- val이 queue보다 작으면 n값을 `answer`에 넣어주고 다음 비교를 진행합니다.

```python
from collections import deque

def solution(progresses, speeds):
    answer = []
    complete = [-1*((p-100)//s) for p,s in zip(progresses, speeds)]
    queue = deque(complete)
    while queue:
        val = queue.popleft()
        n = 1
        while queue and val >= queue[0]:
            n += 1
            queue.popleft()
        answer.append(n)
    return answer
```
