t---  
layout: post
title: "[Git] reset, restore로 변경사항, 커밋을 초기화하기"
subtitle: "[Git] reset으로 변경사항, 커밋을 초기화하기"  
categories: Development
tags: Git
comments: true  
---  
## 테스트를 위한 파일 생성
테스트를 위해 아래와 같이 파일을 생성함

```python
## a.py
a 파일을 생성함
```

---

## git restore로 파일 변경사항 초기화히기

- a.py를 수정한 다음 이를 초기화해보자

```python
## a.py
a 파일을 생성함
a 파일을 수정함
```

- `git restore {변경 파일 명}` : 특정 파일의 변경 사항을 제거하고 HEAD 기준으로 되돌리고 싶을 때 restore를 사용할 수 있다. 

```python
## a.py
a 파일을 생성함
```
- a.py 파일이 원 상태로 되돌아왔다.

---

## git reset --hard로 특정 커밋 시점으로 돌아가기

- `git reset --hard {커밋 ID}` : 완전히 특정 커밋으로 넘어가는 역할. 이때 변경 사항들은 모두 사라짐. 

```python
## a.py
a 파일을 생성함
a 파일을 수정함 
```

- `a.py`이 수정전으로 돌아감.

```python
## a.py
a 파일을 생성함
```

- stage에 올라와 있는 내용이 없음. 이전에 작업 내용들이 완전히 사라짐. 

![git_reset2.jpg](https://yunsikus.github.io/assets/img/post_img/git_reset2.jpg)

---

## git reset --mix로 특정 커밋 시점으로 돌아가기

- `git reset`이랑 같음. mix가 디폴트임

```python
## a.py
a 파일을 생성함
a 파일을 수정함
```

- `a.py`는 수정전으로 돌아가지는 않는다.

```python
## a.py
a 파일을 생성함
a 파일을 수정함
```

- 다만 `hard`와의 차이점은, `a.py`의 수정 내용들이 아예 사라지는 것이 아니라 workspace에 `unstaged`상태로 남는다.

![git_reset3.jpg](https://yunsikus.github.io/assets/img/post_img/git_reset3.jpg)

---

## git reset --soft로 특정 커밋 시점으로 돌아가기

- git reset --mix와 마찬가지로 a.py는 수정 전으로 돌아가지는 않는다. 
- 다만, `mix`와의 차이점은, `a.py`의 수정 내용들이 `unstaged` 상태가 아닌 `staged` 상태로 남게 남는다. 

![git_reset4.jpg](https://yunsikus.github.io/assets/img/post_img/git_reset4.jpg)

## 출처

인프런 - 모든 개발자의 실무를 위한 올인원 기본기 클래스