---  
layout: post
title: "[Django] Django ORM - 쿼리"
subtitle: "[Django] Django ORM"  
categories: Development Django
tags: Django
comments: true  
---  
장고에서 자주 사용하는 쿼리들을 알아봅시다.

## .all()

- 테이블 데이터를 전부 갖고 온다. 즉 해당 쿼리셋의 모든 요소를 반환한다. 현재 쿼리셋의 복사본을 반환한다고 볼 수 있다.

```python
# 주문 정보
from rest.models import Order
Order.objects.all()

# <QuerySet [<Order: [13] None>, <Order: [14] None>, <Order: [15] None>]>
```
## .filter()

- 특정 조건에 맞는 Row들을 갖고오기 위해서 사용되는 메소드.
- 괄호 안에 lookup parameter(지정된 매개변수)와 일치하는 객체를 포함한 새로운 쿼리셋을 변수로 특정 조건에 맞는 데이터를 추출하는데 사용하고 복잡한 쿼리셋을 만들기 위해 Q objects를 사용할 수 있다.


조회조건

|조회조건|설명|사용방법|
|-|-|-|
|**__contains**|지정한 문자열을 포함하는 데이터 조회|Post.objects.filter(title__contains=’test’)|
|**__lt**|값이 작은 경우(lt: less than)|Post.objects.filter(published_at__lt=timezone.now())|
|**__lte**|값이 작거나 같은 경우(lte: less than or equal)|Post.objects.filter(published_at__lt=timezone.now())|
|**__gt**|값이 큰 경우(gt: greater than)|Post.objects.filter(published_at__gt=timezone.now())|
|**__gte**|값이 크거나 같은 경우(gt: greater than or equal)|Post.objects.filter(published_at__gte=timezone.now())|
|**__in**|주어진 리스트에 포함되는 데이터 조회|Post.objects.filter(id__in=[1, 2, 3])|
|**__year**|해당 년도 조회|Post.objects.filter(created_at__year=’2019’)|
|**__month**|해당 월로 조회|Post.objects.filter(created_at__month=’5’)|
|**__day**|해당 일로 조회|Post.objects.filter(created_at__day=’21’)|
|**__isnull**|해당 열이 null인 데이터 조회|Post.objects.filter(published_at__isnull=True)|
|**__startswith**|해당 문자열로 시작하는 데이터 조회|Post.objects.filter(title__startswith=’This’)|
|**__istartswith**|대소문자를 가리지 않고 해당 문자열로 시작하는 데이터 조회|Post.objects.filter(title__istartswith=’this’)|
|**__endswith**|해당 문자열로 끝나는 데이터 조회|Post.objects.filter(title__endswith=’title’)|
|**__iendswith**|대소문자를 가리지 않고 해당 문자열로 끝나는 데이터 조회|Post.objects.filter(title__iendswith=’title’)|
|**__range**|범위를 지정하여 조회(sql의 between)|Post.objects.filter(id__range=(1, 10))|

- Q 객체를 이용하여 복잡한 질의도 가능하다.

```python
from django.db.models import Q

# 거래액이 500000원 이상이거나 100000원 이하인 주문 조회
order.objects.filter(
	Q(sales__gte=500000) | Q(sales__lte=100000)
)

# 12월 거래액이 3000이상인 주문 조회
User.objects.filter(
	Q(sales__gte=3000) & Q(created_at__month='12')
)
```

## .exclude()

- 특정 조건을 제외한 나머지 Row들을 갖고오기 위해서 사용되는 메소드.
- 지정된 parameter(매개변수)와 일치하지 않는 객체를 포함한 QuerySet을 반환한다. `filter()` 와 반대로 동작한다.

```python
Post.objects.exclude(title__startswith='First')
```

## .count()

- 데이터의 갯수(row의 수)를 세기 위해 사용되는 메소드.
- QuerySet과 일치하는 DB 객체의 수를 나타내는 정수를 반환한다.

```python
# 데이터베이스에 있는 entry의 갯수를 반환한다.
Entry.objects.count()

# Returns the number of entries whose headline contains 'Lennon'
Entry.objects.filter(headline__contains='Lennon').count()
```

## .first(), .last()

데이터들 중 처음에 있는 row, 마지막에 있는 row만을 반환한다.
QuerySet과 일치하는 첫 객체를 반환하는데, 정렬을 정의하지 않으면 pk로 자동 정렬한다.

```python
p = Supplier.objects.order_by('title', 'pub_date').first()
```

## Group by query

장고에서 지원하는 다양한 집계함수

- django.db의 models를 import하여 사용
- Count, Sum, Avg, Max, Min등을 지원함
- aggregation 함수를 사용하기 전에 group by를 진행할 필드를 지정 (`.values()`)

```python
from django.db import models as dm

queryset = Order.objects.values('id').annotate(
	pricesum = dm.Sum('price')
)
```

## Reference

[장고걸스 튜토리얼](https://tutorial.djangogirls.org/ko/django_orm/)

[장고 ORM Cookbook](https://django-orm-cookbook-ko.readthedocs.io/en/latest/index.html)

[Django QuerySet Method](https://velog.io/@magnoliarfsit/ReDjango-8.-QuerySet-Method-2)
