---  
layout: post  
title: "airflow 슬랙연동"  
subtitle: "airflow 슬랙연동"  
categories: Development
tags: Airflow Python
comments: true  


---  
Airflow 의 모니터링 기능을 위해 팀에서 사용중인 slack 채널에 연동하였습니다.
팀에서 slack 채널을 운영하여 접근성이 좋고, 팀원들과 오류 로그를 공유하고 즉각즉각 대처할 수 있게 되었습니다.

## 1. Slack 내에서 app을 생성

다음과 같이 작업하는 workspace내에 App을 생성합니다. `airflow_alarm`이라는 app을 생성했습니다.

![slack_airflow_연동1](https://yunsikus.github.io/assets/img/post_img/airflow_slack1.jpg)

---

## 2. App내 환경설정

다음으로 incoming webhook를 활성화합니다.
Features -> Incoming Webhooks에 들어간 다음 activate해줍니다.

![slack_airflow_연동2](https://yunsikus.github.io/assets/img/post_img/airflow_slack2.jpg)

또한, 메시지를 받기 위해 권한을 추가해줍니다.
OAuth & Permissions -> Scopes에서 `chat:write`를 추가합니다.

![slack_airflow_연동3](https://yunsikus.github.io/assets/img/post_img/airflow_slack3.jpg)

다음으로 메시지를 받을 슬랙 채널에 봇을 초대합니다. 일단 `#general` 채널을 알림용 채널로 설정하겠습니다.

---

## 3. test용 airflow dag 작성
SlackAPIPostOperator를 활용하여 메시지가 잘 전달되는지 확인합니다.
이때 토큰은 OAuth & Permissions의 `Bot User OAuth Token`을 사용하면 됩니다.
후에 ui에서 수동으로 trigger하면 `#general` 채널로 알림이 오는지 확인할 수 있습니다.



```python
from datetime import datetime, timedelta
import airflow
from airflow import DAG
from airflow.operators.slack_operator import SlackAPIPostOperator


default_args = {
    'owner': 'yunsikud',
    'depends_on_past': False,
    'start_date': datetime(2020, 12, 17, 10, 0)
}

dag = DAG(
    'test_slack_0.0.1',
    default_args=default_args,
    schedule_interval='@once',

)

t1 = SlackAPIPostOperator(
    task_id='send_slack',
    token='xoxb-', # Bot User OAuth Access Token
    channel='#general',
    username='Airflow',
    text='Hi. I am from Airflow! \n',
    dag = dag
)

```

메시지는 다음과 같이 전달됩니다.

![slack_airflow_연동4](https://yunsikus.github.io/assets/img/post_img/airflow_slack4.jpg)

---

## 4. Connections에 slack token을 저장

Airflow 내의 변수 저장 기능인 Connections를 활용하여 토큰을 저장합니다. 토큰을 스크립트가 아닌 Airflow내에서 가져올 수 있게 됩니다. `Conn Id` 는 slack `Password`에 토큰을 넣고 저장합니다.

![slack_airflow_연동5](https://yunsikus.github.io/assets/img/post_img/airflow_slack5.jpg)

---

## 5. 배치 에러 시 slack으로 메시지 전송하는 클래스를 생성

utils 폴더에 SlackAlert 클래스를 만듭니다. 에러 발생시 해당 클래스를 통해 slack에 전달 될 예정입니다.

```python
from airflow.hooks.base_hook import BaseHook
from airflow.operators.slack_operator import SlackAPIPostOperator

class SlackAlert:
    def __init__(self, channel):
        self.slack_channel = channel
        self.slack_token = BaseHook.get_connection('slack').password # connections의 password에서 토큰을 가져온다.

    def slack_fail_alert(self, context):
        alert = SlackAPIPostOperator(
            task_id='slack_failed',
            channel=self.slack_channel,
            token=self.slack_token,
            text="""
                :red_circle: Task Failed.
                *Task*: {task}  
                *Dag*: {dag}
                *Execution Time*: {exec_date}  
                *Log Url*: {log_url}
                """.format(
                    task=context.get('task_instance').task_id,
                    dag=context.get('task_instance').dag_id,
                    exec_date=context.get('execution_date'),
                    log_url=context.get('task_instance').log_url,
                    )
                  )
        return alert.execute(context=context)
```

---

## 6. 기존의 Dag에서 'on_failure_callback' 옵션을 추가
default_args에 'on_failue_callback'을 추가하고 앞서 작성한 SlackAlert를 넣어줍니다.

```python
from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from utils.alert import SlackAlert

## 메세지를 보낼 slack 채널명
alert = SlackAlert('#알림-airflow')

default_args = {
	'owner': 'admin',
    'start_date': datetime(2021, 4, 10),
    'retries': 5,
    'depends_on_past': False,
    'on_failure_callback': alert.slack_fail_alert
}   
```

배치 오류시 다음과 같은 메세지를 전달하게 됩니다.

![slack_airflow_연동6](https://yunsikus.github.io/assets/img/post_img/airflow_slack6.jpg)



## Reference

[Integrating Slack Alerts in Airflow](https://medium.com/datareply/integrating-slack-alerts-in-airflow-c9dcd155105)

[Airflow 이용해서 Slack Bot 만들기 - 기초](https://datarami.tistory.com/16)
