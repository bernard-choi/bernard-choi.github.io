---
layout: post
title: "[Python] 1976 여행가자"
subtitle: "[Python] 20057 여행가자 "
categories: Algorithm
tags: 문제풀이 Graph Union-Find
comments: true


---
## [백준 1976: 여행가자](https://www.acmicpc.net/problem/1976)

## 문제
동혁이는 친구들과 함께 여행을 가려고 한다. 한국에는 도시가 N개 있고 임의의 두 도시 사이에 길이 있을 수도, 없을 수도 있다. 동혁이의 여행 일정이 주어졌을 때, 이 여행 경로가 가능한 것인지 알아보자. 물론 중간에 다른 도시를 경유해서 여행을 할 수도 있다. 예를 들어 도시가 5개 있고, A-B, B-C, A-D, B-D, E-A의 길이 있고, 동혁이의 여행 계획이 E C B C D 라면 E-A-B-C-B-C-B-D라는 여행경로를 통해 목적을 달성할 수 있다.

## 입력
첫 줄에 도시의 수 N이 주어진다. N은 200이하이다. 둘째 줄에 여행 계획에 속한 도시들의 수 M이 주어진다. M은 1000이하이다. 다음 N개의 줄에는 N개의 정수가 주어진다. i번째 줄의 j번째 수는 i번 도시와 j번 도시의 연결 정보를 의미한다. 1이면 연결된 것이고 0이면 연결이 되지 않은 것이다. A와 B가 연결되었으면 B와 A도 연결되어 있다. 마지막 줄에는 여행 계획이 주어진다. 도시의 번호는 1부터 N까지 차례대로 매겨져 있다.

## 출력
첫 줄에 가능하면 YES 불가능하면 NO를 출력한다.

## 풀이

- 여행경로가 서로 하나의 집합안에 있는지 확인하는 Union-Find 알고리즘을 활용하여 풀 수 있습니다.

- 도시를 각 정점이라 생각하고, 연결된 두 정점이 주어졌을 때, 인덱스 번호가 작은 정점을 인덱스 번호가  정점의 부모로 Union 해줍니다.

- 마지막으로 모든 여행지의 최상위 정점을 확인하여 같으면 이어진 경로, 다르면 분리된 경로라는 뜻입니다.


```python
# input 정보 받기
N = int(input())
M = int(input())
matrix = []
for _ in range(N):
    matrix.append(list(map(int, input().split())))

travel_list = list(map(int, input().split()))

# 각 경로의 parent 노드
p = [0]
for i in range(1, N+1):
    p.append(i)

# union-find 함수 정의
def find(u): ## u 정점의 루트 노드 탐색
    if u != p[u]: ## u가 루트 노드가 아니면
        p[u] = find(p[u]) # 3 -> 2, 2 -> 1 일 경우 3 -> 1 로 경로 압축
    return p[u] ## u가 루트 노트이면 u 반환

def union(u, v):
    root1 = find(u) # B'
    root2 = find(v)  # A'
    p[root2] = root1 # A'의 부모느드를 B'로 변경

# 인덱스 번호가 작은 정점을 인덱스 번호가 큰 정점의 부모로 Union
for i in range(0, N):
    for j in range(1+i, N): #곂치는 부분은 반복 안하기 위해 j 설정
        if matrix[i][j] == 1:
            union(i+1, j+1)

# 최상위 정점이 모두 같으면 YES, 하나라도 다르면 NO
answer = set([find(x) for x in travel_list])
if len(answer) == 1:
    print('YES')
else:
    print('NO')
```
