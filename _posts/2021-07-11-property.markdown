---  
layout: post
title: "[Python Cleancode] Property로 class 내부 데이터 접근 제어"
subtitle: "[Python Cleancode] Property로 class 내부 데이터 접근 제어" 
categories: Python
tags: Cleancode
comments: true  
--- 

## 서론

- 클래스 내부 데이터는 보호되어야 함. 
- 속성에 대한 접근을 제어하려는 경우 자바와 같은 다른 프로그래밍 언어에서는 접근 메서드(getter와 setter)를 만들지만 파이썬에서는 `property`를 사용. 

## 예시

- 에를 들어, 사람의 이름, 성, 나이 데이터를 담기 위한 클래스를 작성한다고 하자.
- 필드명을 사용해서 내부 데이터에 접근하는 것은 편리하지만 해당 데이터는 외부로부터 무방비 상태에 놓이게 됨.
  
```python
class Person:
  def __init__(self, first_name, last_name, age):
      self.first_name = first_name
      self.last_name = last_nam호
      self.age = age
```

```python
person = Person("John", "Doe", 20)
person.age # 20
person.age = person.age + 1 # 클래스 내부 데이터 변환과 호출 함수가 같음. 
person.age # 21
```

## Geter / Setter

- _get 과 _set 메서드를 생성해서 데이터의 접근하는 방법을 분리해낼 수 있다. 
- Person 클래스에 age 필드에 대한 get_age() 와 set_age() 메서드를 추가.
- 이때 나이는 음수가 될 수 없으므로 set_age() 메서드에 음수가 인자로 넘어오면 예외 처리

```python
class Person:
    def __init__(self, first_name, last_name, age):
        self.first_name = first_name
        self.last_name = last_name
        self.set_age(age)

    def get_age(self):
        return self._age # 외부에서 직접 접근하지 않는 변수의 경우 private 하게 정의한디. 

    def set_age(self, age):
        if age < 0:
            raise ValueError("Invalid age")
        self._age = age
```

```python
person = Person("John", "Doe", 20)
person.get_age # 20
person.set_age(-1) # ValueError: Invalid age
person.set_age(person.get_age() + 1) 
person.get_age # 21
```
## @property 데코레이터를 사용

- `@property`를 사용하여 위와 동일하게 작동하는 코드를 간결하게 작성 가능
- person.age는 `@property`의 기능으로, age 변수를 가져오는 것이 아닌 age 메소드를 실행시키게 됨. 


```python
class Person:
    def __init__(self, first_name, last_name, age):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, age):
        if age < 0:
            raise ValueError("Invalid age")
        self._age = age
```
```python
person = Person("John", "Doe", 20)
person.age # 20  
person.age = -1 # ValueError: Invalid age
person.age = person.age + 1
person.age # 21
```

## property의 이점

- 명령-쿼리 분리 원칙을 따르기 위한 좋은 방법
- 클래스 내의 속성에 대한 접근을 보호할 수 있음. 
- 객체의 모든 속성에 대해 propery 혹은 _get, _set 메서드를 작성할 필요는 없고, 속성값을 가져오거나 수정할 때 특별한 로직이 필요한 경우에만 사용한다. 
  - 객체의 속성을 다루는 코드를 수정하지 않고 class만 변경하면 됨. 코드 중복 줄일 수 있기 때문
- 함수명으로 생기는 혼동을 방지할 수 있음
  - @property와 @<property_name>.setter로 나뉘어져 있기 떄문


## Reference

- 파이썬 클린코드 2장 : Pythonic Code
- [https://blog.naver.com/codeitofficial/221695196435](https://blog.naver.com/codeitofficial/221695196435)