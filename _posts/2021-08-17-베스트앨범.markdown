---  
layout: post  
title: "[Python] 베스트앨범"  
subtitle: "[Python] 베스트앨범"  
categories: Algorithm
tags: 문제풀이 Hash Sort 해쉬 정렬
comments: true  
---  

## [프로그래머스 베스트앨범](https://programmers.co.kr/learn/courses/30/lessons/42579)

## 문제

스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.

- 속한 노래가 많이 재생된 장르를 먼저 수록합니다.
- 장르 내에서 많이 재생된 노래를 먼저 수록합니다.
- 장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.
  
노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.

## 제한사항

- genres[i]는 고유번호가 i인 노래의 장르입니다.
- plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.
- genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.
- 장르 종류는 100개 미만입니다.
- 장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.
- 모든 장르는 재생된 횟수가 다릅니다.


## 입출력 예

![베스트앨범](https://yunsikus.github.io/assets/img/post_img/베스트앨범.jpg)

## 입출력 예 설명

classic 장르는 1,450회 재생되었으며, classic 노래는 다음과 같습니다.

- 고유 번호 3: 800회 재생
- 고유 번호 0: 500회 재생
- 고유 번호 2: 150회 재생

pop 장르는 3,100회 재생되었으며, pop 노래는 다음과 같습니다.

- 고유 번호 4: 2,500회 재생
- 고유 번호 1: 600회 재생

따라서 pop 장르의 [4, 1]번 노래를 먼저, classic 장르의 [3, 0]번 노래를 그다음에 수록합니다.

## 풀이
- 프로그래머스에서는 해시문제로 분류되어 있으나, 정렬이 더 까다로운 문제인듯 하다. python의 sort 함수를 이용하면 특정 변수에 따라 오름차순, 내림차순으로 쉽게 정렬할 수 있다. 

- `장르`, `플레이횟수`, `고유번호`를 zip함수로 묶어줍니다. 
  - ex) [["classic", 500, 0], ["pop", 600, 1]...]
- 모든 장르를 set으로 추출한 후 각 `장르`를 key, `총 플레이 횟수`를 value로 가지는 딕셔너리를 만들어줍니다. 
- zipped된 리스트를 차례로 돌면서 각 장르에 해당하는 플레이 횟수를 더해줍니다. 장르에 따른 총 플레이 횟수를 구하게 됩니다. 
- 이후 플레이 횟수에 따라 장르를 정렬합니다. 
- 플레이 횟수가 많은 장르부터 차례로 많이 플레이된 노래를 정렬합니다. 
  - python의 sort함수를 이용해 `플레이 횟수`로는 내림차순 `고유번호`는 오름차순에 따라 정렬합니다. 
- 만약 해당 장르의 음악이 2개 이상인 경우는 2개 모두 `answer`에 넣어줍니다. 
- 해당 장르의 음악이 1개인 경우는 하나만 `answer`에 넣어줍니다. 



```python
def solution(genres, plays):
    answer = []
    zipped = [[x,y,z] for x, y, z in zip(genres, plays, range(len(plays)))]
    
    genre_set = set(genres) # 모든 장르 추출
    genre_count = {x:0 for x in genre_set} # genre와 플레이 횟수를 담을 dictionary 생성

    for arr in zipped: # 장르별 플레이 횟수 합산
        genre_count[arr[0]] += arr[1]

    genre_sorted = sorted(list(genre_count.items()), key = lambda x: -x[1]) # 플레이 횟수에 따라 장르 정렬
    
    for genre in genre_sorted: # 플레이 횟수가 많은 장르부터
        songs = [x for x in zipped if x[0] == genre[0]]
        songs.sort(key = lambda x : (-x[1],x[2])) # 플레이 횟수는 내림차순, 인덱스는 오름차순에 따라 정렬
        if len(songs) >= 2: # 장르에 음악이 2개 이상인 경우
            answer.append(songs[0][2])
            answer.append(songs[1][2])
        elif len(songs) == 1: # 장르에 음악이 하나인 경우
            answer.append(songs[0][2])
        
    return answer
```