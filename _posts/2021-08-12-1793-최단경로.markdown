---
layout: post
title: "[Python] 1753 최단경로"
subtitle: "[Python] 1753 최단경로"
categories: Algorithm
tags: 문제풀이 다익스트라 dijkstra 그리디 greedy
comments: true


---
## [1793 최단경로](https://www.acmicpc.net/problem/1753)

## 문제
방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.

## 입력
첫째 줄에 정점의 개수 V와 간선의 개수 E가 주어진다. (1≤V≤20,000, 1≤E≤300,000) 모든 정점에는 1부터 V까지 번호가 매겨져 있다고 가정한다. 둘째 줄에는 시작 정점의 번호 K(1≤K≤V)가 주어진다. 셋째 줄부터 E개의 줄에 걸쳐 각 간선을 나타내는 세 개의 정수 (u, v, w)가 순서대로 주어진다. 이는 u에서 v로 가는 가중치 w인 간선이 존재한다는 뜻이다. u와 v는 서로 다르며 w는 10 이하의 자연수이다. 서로 다른 두 정점 사이에 여러 개의 간선이 존재할 수도 있음에 유의한다.

## 출력
첫째 줄부터 V개의 줄에 걸쳐, i번째 줄에 i번 정점으로의 최단 경로의 경로값을 출력한다. 시작점 자신은 0으로 출력하고, 경로가 존재하지 않는 경우에는 INF를 출력하면 된다.

## 풀이

- 다익스트라 알고리즘으로 풀 수 있습니다. 
- 노드의 수는 20,000개이므로 간선을 노드와 노드 사이의 이차원 행렬로 표현하여 저장하면 20,000 ^2개 즉 4억의 저장공간이 필요하여 오류발생(`메모리 초과`)
  - 해결책 : 노드끼리 이어져 있는 간선만을 딕셔너리 형태로 저장
- 최소비용을 단순히 선형 탐색으로 찾는다면 시간 복잡도는 `O(N^2)`로 오류 발생. (`시간초과 발생`)
  - 해결책 : `priority queue`를 이용하여 최소값을 구하면 시간복잡도를 `O(NlongN)`으로 줄일 수 있음
  - input 받을때 sys.stdin.readline으로 받는다. 

```python
import heapq
import sys
input =  sys.stdin.readline

V, E = map(int,input().split())
start_V = int(input())
graph = {}

for i in range(V):
    graph[i+1] = {}
for i in range(1, V+1):
    graph[i][i] = 0
for _ in range(E):
    u, v, w = map(int, input().split())
    if graph[u].get(v):
        graph[u][v] = min(graph[u][v], w)
    else:
        graph[u][v] = w

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}  # start로 부터의 거리 값을 저장하기 위함
    distances[start] = 0  # 시작 값은 0이어야 함
    queue = []
    heapq.heappush(queue, [distances[start], start])  # 시작 노드부터 탐색 시작 하기 위함.

    while queue:  # queue에 남아 있는 노드가 없으면 끝
        current_distance, current_destination = heapq.heappop(queue)  # 탐색 할 노드, 거리를 가져옴.

        if distances[current_destination] < current_distance:  
            # 현재 노드가 이미 처리된 노드라면 
            # 기존에 있는 거리보다 길다면, 볼 필요도 없음
            continue
        
        for new_destination, new_distance in graph[current_destination].items():
            distance = current_distance + new_distance  # 해당 노드를 거쳐 갈 때 거리
            if distance < distances[new_destination]:  # 알고 있는 거리 보다 작으면 갱신
                distances[new_destination] = distance
                heapq.heappush(queue, [distance, new_destination])  # 다음 인접 거리를 계산 하기 위해 큐에 삽입
    
    return distances

distances = dijkstra(graph,start_V)
answer = [x[1] for x in distances.items()]
for ans in answer:
    if ans == float('inf'):
        print('INF')
    else:
        print(i)
```
