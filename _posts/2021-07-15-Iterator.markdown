---  
layout: post
title: "[Python Cleancode] 반복 가능한 객체 Iterable, Iterator, Sequence"
subtitle: "[Python Cleancode] 반복 가능한 객체 Iterable, Iterator, Sequence" 
categories: Python 
tags: Cleancode Iterable Iterator
comments: true  
--- 

## 서론

- 파이썬에서는 데이터 타입의 내부 구현을 노출하지 않고 포함하고 있는 요소들을 순회할 수 있는 방법을 제공하는 패턴인 `Iterator Pattern`을 제공. 
- 대부분 언어에서 이터레이터 패턴을 콜렉션 라이브러리의 구현방식이나 문법 요소로 제공하고 있기는 하지만 파이썬 만큼 언어 자체에 자연스럽게 녹아 있는 경우는 많지 않다.
- 파이썬에서의 반복 가능한 객체를 알아보자 (`Iterable`, `Iterator`, `Sequence`)


## Iterable

- \__iter__ 매직 메소드를 구현한 객체.
- **Iterator로 변환 가능한 객체를 의미**
- Iterable한 것은 \__next__ 메소드가 존재하지 않는다.( 자체적으로 순차적인 접근이 불가능하다 ) 

```python
li = [1, 2, 3, 4, 5]
print(li) # [1, 2, 3, 4, 5]
print(li[1:4]) #  [2, 3, 4]

next(li) # TypeError: 'list' object is not an iterator
```
- for문을 사용하여 순차적으로 접근이 가능한데, 이것은 for문으로 looping하는 동안 python 내부에서 임시호 list를 iterator로 자동 변환하기 때문
- 예로는 `Sequence` type 인 list, str, tuple이 있다.


## Iterator

- `Iterator`는 \__next__ 소드가 존재하는 것. 
- 값을 차례대로 꺼낼 수 있는 객체
- \__next__ 메소드로 다음 값을 반환할 수 있다. 
- list는 `Iterable`하지만 iter() 함수를 통해 `iterator` 객체로 바꿀 수 있다. 

```python
li = [1, 2, 3, 4, 5]
li_iter = iter(li)
next(li_iter) # 1
next(li_iter) # 2
next(li_iter) # 3
next(li_iter) # 4
next(li_iter) # 5
next(li_iter) # StopIteration
```

```python
li = [1, 2, 3, 4, 5]
li_iter = iter(li)
type(iter) # <class 'list_iterator'>
```

## Sequence

- 객체에 \__iter__() 메서드가 없어도 반복하기를 원할 수 있다. 
- \__len__ 과 \__getitem__을 구현하고 첫번째 인덱스 0부터 시작하여 포함된 요소를 한번에 하나씩 가져올 수 있도록 구현하면 됨
- `Iterable`을 사용하면 메모리를 적게 사용하지만 n번째 요소를 얻기 위한 시간 복잡도는 O(n). 하지만 `Sequence`로 구현허면 더 많은 메모리가 사용되지만 특정 요소를 가져오기 위한 시간 복잡도는 O(1)로 상수에 가능


## Reference

- [https://itholic.github.io/python-iterable-iterator/](https://itholic.github.io/python-iterable-iterator/)

- 파이썬 클린코드 2장 : Pythonic Code