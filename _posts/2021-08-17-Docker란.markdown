---
layout: post
title: "[Docker] 컨테이너와 도커"
subtitle: "[Docker] 컨테이너와 도커"
categories: Development
tags: Docker
comments: true


---

## 컨테이너와 도커

### 1.1 컨테이너와 MSA
- 문제상황 : 컴퓨터는 CPU, SSD, RAM, 그래픽 카드 등 각종 하드웨어로 구성됨. 그리고 윈도우, macOS, 리눅스와 같은 운영체제 위에서 저희가 사용하는 어플리케이션이 실행됨. 만약에 도입하라는 어플리케이션이나 플랫폼이 서로 다른 요구사항을 가진다면 문제가 생김. 

- 컨테이너가 바로 그 해결책을 제시함. HostOS에 어플리케이션을 실행할 공간을 각각 구성하고 IP와 디렉토리는 분리시켜 놓은 것을 컨테이너라고 함. 컨테이너는 Guest OS를 두지 않고 어플리케이션과 미들웨어를 실행함. 

- 각 컨테이너에는 어플리케이션 별로 요구하는 환경을 배타적으로 세팅할 수 있으며, 구성된 컨테이너를 통합해 하나의 큰 시스템을 구축할 수 있습니다. 이를 MSA(Microservice Architecture)라고 합니다. MSA는 어플리케이션 기능과 용도에 따라 모듈화하여 개발하고 이를 독립적으로 배포할 수 있는 환경을 지향합니다. 


### 1.2 도커의 역할

- 도커는 어플리케이션을 실행하는 데에 필요한 각종 요소들을 한데 묶어 하나의 이미지로 생성합니다. 
- 생성된 이미지는 HostOS 상에서만 이용되는 것이 아니라 Docker Hub 이라는 레지스트리에 공유가 가능합니다. 이 레지스트리에는 제조사에서 제공하는 리눅스 배포판이나 웹서버, DBMS등의 공식 이미지가 공개되어 있습니다. 개인이 본인 소유의 저장소에 이미지를 저장하는 것 역시 가능합니다. 만약 사내 시스템과 관련한 민감 정보가 이미지에 포함된 경우라면 AWS, GCP에서 제공하는 사설 레지스트리를 활용할 수도 있으며 개인 서버에 레지스트리를 구축하는 것도 가능합니다. 

- 정리하자면 도커는 **어플리케이션 및 실행환경을 정의한 이미지를 생성/공유함과 동시에, 이를 이용하여 컨테이너를 작동할 수 있도록 하는 플랫폼**입니다. 

### 1.3 개발자 + 도커 = 😄

- 일반적으로 배포과정은 "개발 - 통합테스트 - 스테이징(가상운영) - 운영" 총 4단계 인프라 환경을 거쳐 프로덕션으로 배포가 됩니다.

![docker1](https://yunsikus.github.io/assets/img/post_img/docker1.jpg) 

- 각 환경이 동일하다는 보장이 없다면 최종 배포까지 했던 모든 노력이 무색하고 중대 장애를 야기할 수 있습니다. 

![docker2](https://yunsikus.github.io/assets/img/post_img/docker2.jpg) 

- 도커 기반의 개발환경에서는 빌드 정보를 담고 있는 Dockerfile과 소스코드를 함께 Git저장소에 push 합니다. 
- 이를 기반으로 빌드된 이미지는 Docker Registry에 저장되고 개발자는 이미지를 활용하여 각 환경에 알맞게 컨테이너를 생성
- 이미지에는 어플리케이션 런타임에 관련된 모든 미들웨어, 라이브러리등 의존성이 전부 포함되어 있으므로 "개발 환경에서는 잘 됐는데 운영 환경에서 갑자기 안돼요"라는 억울한 상황을 미연에 방지할 수 있습니다. 
- 도커의 등장은 '개발'과 '관리'로 이원화된 역할을 하나로 묶어주는 중요한 역할을 합니다. 기존에는 두 영역의 업무를 수행에 필요한 지식이 상이했다면 도커 시스템 상에서는 어떻게 Dockerfile을 작성해서 컨테이너를 구성할 것인가를 고민하면 됩니다. 어플리케이션 개발자가 실제 배포까지 수행할 수 있는 환경을 구축했기 때문에 배포는 '관리'에서 할때까지 마냥 기다리며 의존할 필요가 없어집니다. 


### 1.4 도커 컨테이너

- 컨테이너를 아는 것이 곧 도커를 아는 것이라 할 정도로 컨테이너는 매우 중요한 개념
- 아래 다이어그램을 보면, 컨테이너는 도커가 설정한 네트워크 설정 및 저장장치에 따라 구성됨
- 어플리케이션은 바로 이 가상의 공간에서 실행됨

![docker3](https://yunsikus.github.io/assets/img/post_img/docker3.jpg) 

- 좀 더 멀리서 컨테이너를 바라보면 다음과 같습니다. 

![docker4](https://yunsikus.github.io/assets/img/post_img/docker4.jpg) 

- 이 사각형 전체를 컴퓨터라고 생각하면, CPU, 저장장치, LAN카드, 그래픽 카드등의 하드웨어가 컴퓨터를 물리적으로 구성하고 있음. 여기에 OS를 기반으로 하여 도커 엔진이 구동되고 컨테이너는 바로 이 도커엔진의 통제에 의해 움직인다. 


- 언뜻 보면 VM을 구동하는 것과 비슷해보이지만 컨테이너에는 기본적으로 OS가 없고, 어플리케이션 구동을 위해 필요한 라이브러리만을 개별적으로 가지고 있습니다. 
- OS를 실행할 필요가 없기 때문에 부하가 적고 구동되는 속도 역시 빠르다. 
- 어플리케이션은 독립된 영역을 보장받기 때문에 런타임에서 발생하는 충돌을 피할 수 있다. 

