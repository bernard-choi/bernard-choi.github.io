---  
layout: post
title: "[Git] 브랜치를 머지할때 머지 커밋을 남기기 싫을 때 - squash & rebase merge"
subtitle: "[Git] 브랜치를 머지할때 머지 커밋을 남기기 싫을 때 - squash & rebase merge"  
categories: Development
tags: Git
comments: true  
---  
## 테스트를 위한 파일 생성
- `master` 브랜치 
  
```python
# a.py
a파일 생성
```

```python
# b.py
b파일 생성
```

- `feature-c` 브랜치
  
```python
# c.py
c파일 생성
```


## fast-forward(머지 커밋 X)

- master 브랜치 HEAD를 최신 커밋 HEAD로 이동.
- `master` 브랜치에 추가 커밋이 없는 상태라면 `feature-c`의 모든 커밋이 그대로 `master` 브랜치로 들어감.

---

## 머지 커밋 생성

- `master`브랜치에 추가 커밋이 있다면 머지를 위한 머지 커밋이 생기게 된다. 
  
- `master` 브랜치 
  
```python
# a.py
a파일 생성
a파일 수정 # master 브랜치 커밋 추가
```

```python
# b.py
b파일 생성
```

```python
# c.py
c파일 생성
```

- `feature-d` 브랜치
  
```python
# c.py
d파일 생성
```

- 이 경우, 다음과 같이 머지 커밋이 생기게 된다.

![git_merge1.jpg](https://yunsikus.github.io/assets/img/post_img/git_merge1.jpg)

---

## Squash Merge

- 별다른 머지 커밋을 만들지 않고 변경 사항만 병합하고 싶은 경우 `squash merge`사용
- `squash`는 여러 커밋을 하나의 커밋으로 만들 때 주는 옵션인데, 브랜치간 합칠 때 이 옵션을 주겠다는 의미

- `master` 브랜치
  
```python
# a.py
a파일 생성
a파일 수정 
```

```python
# b.py
b파일 생성
```

```python
# c.py
c파일 생성
```

```python
# d.py
d파일 생성
```

- `feature-e` 브랜치
  
```python
# e.py
e파일 생성
e파일 수정
```

- 머지로 인한 변경사항을 따로 커밋으로 만들 수 있다. 

![git_merge2.jpg](https://yunsikus.github.io/assets/img/post_img/git_merge2.jpg)

- 하나의 커밋으로 묶어서 병합을 하게되면 브랜치의 커밋 구조를 깔끔하게 유지할 수 있다. 
- 다만, merge되는 커밋을 모두 가져오는게 아니라 하나의 커밋으로 처리만 가능하다. 

---

## Rebase & Merge

- merge 커밋을 남기지 않으면서도, merge되는 브랜치의 모든 커밋 내용을 그대로 가져오는 머지. 
- `feature-f` 브랜치에서 `git rebase master` 후 다시 master 브랜치로 가서 머지.
- `fast-forward`와 동일하지만, master에 추가 커밋이 있음에도 머지 커밋이 남지 않는다. 
  

- `master` 브랜치
  
```python
# a.py
a파일 생성
a파일 수정 
a파일 다시 수정 # 커밋 추가
```

```python
# b.py
b파일 생성
```

```python
# c.py
c파일 생성
```

```python
# d.py
d파일 생성
```

```python
# e.py
e파일 생성
e파일 수정
```

- `feature-f` 브랜치
  
```python
# f.py
f파일 생성
f파일 수정
```

![git_merge3.jpg](https://yunsikus.github.io/assets/img/post_img/git_merge3.jpg)