---
layout: post
title: "[Python] 21608 상어 초등학교"
subtitle: "[Python] 21608 상어 초등학교"
categories: Algorithm
tags: 문제풀이 시뮬레이션 simulation
comments: true


---
## [21608 상어초등학교](https://www.acmicpc.net/problem/21608)

## 문제
상어 초등학교에는 교실이 하나 있고, 교실은 N×N 크기의 격자로 나타낼 수 있다. 학교에 다니는 학생의 수는 N\**2명이다. 오늘은 모든 학생의 자리를 정하는 날이다. 학생은 1번부터 N\**2번까지 번호가 매겨져 있고, (r, c)는 r행 c열을 의미한다. 교실의 가장 왼쪽 윗 칸은 (1, 1)이고, 가장 오른쪽 아랫 칸은 (N, N)이다.

선생님은 학생의 순서를 정했고, 각 학생이 좋아하는 학생 4명도 모두 조사했다. 이제 다음과 같은 규칙을 이용해 정해진 순서대로 학생의 자리를 정하려고 한다. 한 칸에는 학생 한 명의 자리만 있을 수 있고, \|r1 - r2\| + \|c1 - c2\| = 1을 만족하는 두 칸이 (r1, c1)과 (r2, c2)를 인접하다고 한다.

1. 비어있는 칸 중에서 좋아하는 학생이 인접한 칸에 가장 많은 칸으로 자리를 정한다.
2. 1을 만족하는 칸이 여러 개이면, 인접한 칸 중에서 비어있는 칸이 가장 많은 칸으로 자리를 정한다.
3. 2를 만족하는 칸도 여러 개인 경우에는 행의 번호가 가장 작은 칸으로, 그러한 칸도 여러 개이면 열의 번호가 가장 작은 칸으로 자리를 정한다.

예를 들어, N = 3이고, 학생 N**2명의 순서와 각 학생이 좋아하는 학생이 다음과 같은 경우를 생각해보자.

![상어초등학교1](https://bernard-choi.github.io/assets/img/post_img/상어초등학교1.jpg)

가장 먼저, 4번 학생의 자리를 정해야 한다. 현재 교실의 모든 칸은 빈 칸이다. 2번 조건에 의해 인접한 칸 중에서 비어있는 칸이 가장 많은 칸인 (2, 2)이 4번 학생의 자리가 된다.

![상어초등학교2](https://bernard-choi.github.io/assets/img/post_img/상어초등학교2.jpg)


다음 학생은 3번이다. 1번 조건을 만족하는 칸은 (1, 2), (2, 1), (2, 3), (3, 2) 이다. 이 칸은 모두 비어있는 인접한 칸이 2개이다. 따라서, 3번 조건에 의해 (1, 2)가 3번 학생의 자리가 된다.

![상어초등학교3](https://bernard-choi.github.io/assets/img/post_img/상어초등학교3.jpg)

다음은 9번 학생이다. 9번 학생이 좋아하는 학생의 번호는 8, 1, 2, 3이고, 이 중에 3은 자리에 앉아있다. 좋아하는 학생이 가장 많이 인접한 칸은 (1, 1), (1, 3)이다. 두 칸 모두 비어있는 인접한 칸이 1개이고, 행의 번호도 1이다. 따라서, 3번 조건에 의해 (1, 1)이 9번 학생의 자리가 된다.

![상어초등학교4](https://bernard-choi.github.io/assets/img/post_img/상어초등학교4.jpg)

이번에 자리를 정할 학생은 8번 학생이다. (2, 1)이 8번 학생이 좋아하는 학생과 가장 많이 인접한 칸이기 때문에, 여기가 그 학생의 자리이다.

![상어초등학교5](https://bernard-choi.github.io/assets/img/post_img/상어초등학교5.jpg)

7번 학생의 자리를 정해보자. 1번 조건을 만족하는 칸은 (1, 3), (2, 3), (3, 1), (3, 2)로 총 4개가 있고, 비어있는 칸과 가장 많이 인접한 칸은 (2, 3), (3, 2)이다. 행의 번호가 작은 (2, 3)이 7번 학생의 자리가 된다.

![상어초등학교6](https://bernard-choi.github.io/assets/img/post_img/상어초등학교6.jpg)

이런식으로 학생의 자리를 모두 정하면 다음과 같다.

![상어초등학교7](https://bernard-choi.github.io/assets/img/post_img/상어초등학교7.jpg)

이제 학생의 만족도를 구해야 한다. 학생의 만족도는 자리 배치가 모두 끝난 후에 구할 수 있다. 학생의 만족도를 구하려면 그 학생과 인접한 칸에 앉은 좋아하는 학생의 수를 구해야 한다. 그 값이 0이면 학생의 만족도는 0, 1이면 1, 2이면 10, 3이면 100, 4이면 1000이다.

학생의 만족도의 총 합을 구해보자.

## 입력
첫째 줄에 N이 주어진다. 둘째 줄부터 N2개의 줄에 학생의 번호와 그 학생이 좋아하는 학생 4명의 번호가 한 줄에 하나씩 선생님이 자리를 정할 순서대로 주어진다.

학생의 번호는 중복되지 않으며, 어떤 학생이 좋아하는 학생 4명은 모두 다른 학생으로 이루어져 있다. 입력으로 주어지는 학생의 번호, 좋아하는 학생의 번호는 N2보다 작거나 같은 자연수이다. 어떤 학생이 자기 자신을 좋아하는 경우는 없다.

## 출력
첫째 줄에 학생의 만족도의 총 합을 출력한다.

## 제한
- 3 ≤ N ≤ 20

## 풀이

1. 앉을 사람(`who`)과 선호도(`likes`)를 차례로 돈다.
ex) 첫번째 턴은 [2, 5, 1, 7]을 좋아하는 4번을 앉혀야함


2. 각 칸을 돌면서 값이 0(아직 아무도 앉지 않음)인 칸에 한하여

3. 좋아하는 학생이 인접한칸이 몇개인지, 인접한 빈칸의 개수가 몇개인지, 그리고 x와 y의 좌표를 기록한다.

4. python의 `sort(lambda x: )` 함수를 이용하여 1. 좋아하는 학생 개수의 내림차순, 2. 인접한 빈칸의 개수의 내림차순 3. y좌표(행) 4. x좌표(열)로 정렬한다.

5. 가장 앞에 나오는 원소의 y좌표 x좌표에 `who`를 앉힌다. 다시 1로 돌아간다.

6. 최종적으로 나온 `board`에서 점수를 계산한다.

```python
dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]

N = int(input())
table = [list(map(int,input().split())) for _ in range(N**2)]
favor = [x[1:] for x in table]
who = [x[0] for x in table]
board = [[0]*N for _ in range(N)]

s_list = {} # {4: [2, 5, 1, 7], ...}
for i in range(len(table)):
    s_list[who[i]] = favor[i]

# 1. 전체 N**2개의 사람을 차례대로 앉힌다.
for i in range(N**2):
    likes = s_list[who[i]]
    # [좋아하는 학생 개수(많), 인접 빈칸 개수(많), y, x]
    like_list = []
    for y in range(N):
        for x in range(N):
            # 2. 아직 아무도 않지 않은 칸에 대하여
            if board[y][x] == 0:
                # 3. 좋아하는 학생 개수, 인접한 빈칸의 개수, y좌표, x좌표를 기록한다.
                like_count = 0
                space_count = 0
                for k in range(4):
                    now_y = y + dy[k]
                    now_x = x + dx[k]
                    if 0<=now_y< N and 0<=now_x<N:
                        if board[now_y][now_x] in likes:
                            like_count += 1
                        elif board[now_y][now_x] == 0:
                            space_count += 1
                like_list.append([like_count, space_count, y, x])
    # 4. 1) 좋아하는 학생 개수의 내림차순, 2)인접한 빈칸의 개수의 내림차순 3) y좌표(행) 4) x좌표(열)로 정렬한다.
    like_list.sort(key = lambda x: (-x[0], -x[1], x[2], x[3]))
    # 5. 가장 앞에 나오는 원소의 좌표(3번째, 4번째값)에 who를 앉힌다.
    board[like_list[0][2]][like_list[0][3]] = who[i]

## 6. 점수 계산
ans = 0
for y in range(N):
    for x in range(N):
        likes = s_list[board[y][x]]
        like_count = 0
        for k in range(4):
            now_y = y + dy[k]
            now_x = x + dx[k]
            if 0<= now_y < N and 0 <= now_x < N:
                if board[now_y][now_x] in likes:
                    like_count += 1
        if like_count == 1:
            ans += 1
        elif like_count == 2:
            ans += 10
        elif like_count == 3:
            ans += 100
        elif like_count == 4:
            ans += 1000

print(ans)
```
