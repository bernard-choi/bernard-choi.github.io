---
layout: post
title: "[Python] 실패율"
subtitle: "[Python] 실패율"
categories: Algorithm
tags: 문제풀이 시뮬레이션 Python
comments: true


---
## [프로그래머스 실패율](https://programmers.co.kr/learn/courses/30/lessons/42889)

## 문제

슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌다. 그녀가 만든 프랜즈 오천성이 대성공을 거뒀지만, 요즘 신규 사용자의 수가 급감한 것이다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지 차이가 너무 큰 것이 문제였다.

이 문제를 어떻게 할까 고민 한 그녀는 동적으로 게임 시간을 늘려서 난이도를 조절하기로 했다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만, 실패율을 구하는 부분에서 위기에 빠지고 말았다. 오렐리를 위해 실패율을 구하는 코드를 완성하라.

실패율은 다음과 같이 정의한다.
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라.

## 제한사항

- 스테이지의 개수 N은 1 이상 500 이하의 자연수이다.
- stages의 길이는 1 이상 200,000 이하이다.
- stages에는 1 이상 N + 1 이하의 자연수가 담겨있다.
  - 각 자연수는 사용자가 현재 도전 중인 스테이지의 번호를 나타낸다.
  - 단, N + 1 은 마지막 스테이지(N 번째 스테이지) 까지 클리어 한 사용자를 나타낸다.
- 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다.
- 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다.


## 입력

## 입출력 예
![실패율1](https://bernard-choi.github.io/assets/img/post_img/실패율1.jpg)

## 입출력 설명

**입출력 예 #1**

1번 스테이지에는 총 8명의 사용자가 도전했으며, 이 중 1명의 사용자가 아직 클리어하지 못했다. 따라서 1번 스테이지의 실패율은 다음과 같다.

- 1 번 스테이지 실패율 : 1/8

2번 스테이지에는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했다. 따라서 2번 스테이지의 실패율은 다음과 같다.

- 2 번 스테이지 실패율 : 3/7

마찬가지로 나머지 스테이지의 실패율은 다음과 같다.

- 3 번 스테이지 실패율 : 2/4
- 4번 스테이지 실패율 : 1/2
- 5번 스테이지 실패율 : 0/1

각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 다음과 같다.

- [3,4,2,1,5]

**입출력 예 #2**

모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며 나머지 스테이지의 실패율은 0이다.

- [4,1,2,3]

## 풀이

실패율의 정의를 살펴보면 `스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수` / `스테이지에 도달한 플레이어 수` 입니다.

스테이지에 도달했으나 아직 클리어하지 못한 플레이어수는 Counter 라이브러리를 이용하여 구합니다. 예를 들어, 2번 스테이지에 도달했으나 아직 클리어하지 못한 플레이어수는 stages내의 2의 개수를 구하면 됩니다.

```python
from collections import Counter
stages = [2, 1, 2, 6, 2, 4, 3, 3]
count = Counter(stages)

print(count) # Counter({2: 3, 1: 1, 6: 1, 4: 1, 3: 2})
print(count[2]) # 3
```

스테이지에 도달한 플레이어 수의 경우 `delimiter`로 변수를 정의하고 처음 시작은 `len(stages)`로 둡니다.  다음 단계로 갈때 이번 스테이지까지 도달한 플레이어의 수를 빼줍니다.

```python
rate = {}
count = Counter(stages)
delimiter = len(stages) # 각 스테이지에 도달한 유저의 수
for stage in range(1,N+1):
      rate[stage] = count[stage]/delimiter
      delimiter -= count[stage] # 다음 stage 실패율 계산 전에 delimiter에서 이번 스테이지까지 도달한 플레이어의 수를 빼준다.
```

만약 스테이지의 개수가 5이지만, 모든 플레이어가 1단계까지 밖에 도달 못했다고 가정해봅시다. 이 경우 2단계의 `실패율`을 계산할 때 `delimiter`가 0이 되어 계산이 되지 않습니다. 문제의 조건을 보면 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 `실패율`은 0 으로 정의한다고 합니다. 즉 `delimiter` 가 0이면 해당 stage의 실패율을 0으로 저장합니다.

```python
count = Counter(stages)
rate = {}
delimiter = len(stages)
for stage in range(1,N+1):
    if delimiter != 0:
        rate[stage] = count[stage]/delimiter
        delimiter -= count[stage]

    # 스테이지에 도달한 유저가 없는 경우 0으로 정의
    else:
        rate[stage] = 0
```

최종 `실패율`은 다음과 같이 딕셔너리로 저장됩니다.

```python
print(rate) # {1: 0.125, 2: 0.42857142857142855, 3: 0.5, 4: 0.5, 5: 0.0}
```

문제에서는 `실패율`을 내림차순으로 정렬한 후, 스테이지의 번호를 리스트로 반환해야 합니다. 이때 Python의 sorted함수에 딕셔너리를 넣는 방법이 있습니다. 다음과 같이 사용했을 때, value로 정렬하여 key값을 return 하고 이를 리스트로 변환해줍니다.

```python
print(sorted(rate, key =lambda x: rate[x], reverse=True))
# [3, 4, 2, 1, 5]
```

최종 풀이는 다음과 같습니다.

```python
from collections import Counter
def solution(N, stages):
    count = Counter(stages) # 각 스테이지까지 도달한 유저의 수
    rate = {}
    delimiter = len(stages) # 각 스테이지에 도달한 유저의 수
    for stage in range(1,N+1):
        if delimiter != 0:
            rate[stage] = count[stage]/delimiter
            delimiter -= count[stage]

        # 스테이지에 도달한 유저가 없는 경우 0으로 정의
        else:
            rate[stage] = 0

    return sorted(rate, key =lambda x: rate[x], reverse=True) # value 값으로 key 값을 정렬
```
