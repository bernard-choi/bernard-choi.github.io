---  
layout: post
title: "[Python Cleancode] CH1. 소개, 코드, 포매팅과 도구"
subtitle: "[Python Cleancode] CH1. 소개, 코드, 포매팅과 도구" 
categories: Python
tags: Cleancode
comments: true  
--- 

### 클린 코드의 의미

- 공식적으로 클린 코드를 측정할 방법은 없다. 
- 기계나 스크립트가 아닌 전문가의 영역
- 클린 코드인지 아닌지는 다른 엔지니어가 코드를 읽고 유지 관리할 수 있는지 여부에 달려있다. 

### 클린 코드의 중요성

- 품질 좋은 소프트 웨어 개발
- 견고하고 유지보수가 쉬운 시스템
- 기술 부채 회피
  
### 클린 코드에서 코드 포매팅의 역할

- 클린 코드란 PEP8 같은 가이드라인을 따라 코드를 포매팅하는 것이 아니다.
- 코딩 표준, 포매팅, 린팅 도구나 검사 도구를 사용한 코드 레이아웃 설정 등 그 이상의 것을 의미

### 프로젝트 코딩 스타일 가이드 준수

- 좋은 레이아웃에서 가장 필요한 특성은 일관성
- 특히 파이썬이 따라야 하는 코딩 스타일은 `PEP-8`이다.
- PEP-8의 특징
  - **검색효율성** : 파이썬은 키워드 인자에 값을 할당할 때는 띄어쓰기를 사용하지 않는다.
    -  파이썬은 키워드 인자에 값을 할당할 때는 띄어쓰기를 사용하지 않는다. 
    -  반면 변수에 값을 할당할 때는 띄어쓰기를 사용하도록 권고 
    -  조건을 변형하여 키워드인자, 변수인자를 각각 검색할 수 있다.  
  - **일관성**
  - **코드품질**
  
### Docstring

- `Docstring`은 소스 코드에 포함된 문서.
- 작은따옴표(`'`) 혹은 큰따옴표(`""`) 새개를 이용하여 문자열을 표현하는 자료형
- 이유가 아니라 설명이다. 즉 코멘트가 아니라 문서임
- `주석`은 지양, `Docstring`을 지향해야함
    - `주석`은 코드로 아이디어를 제대로 표현하지 못했음을 의미
    - `주석`과 코드가 다르면 혼란을 야기함
    - 코드 변경 시 주석 업데이트를 깜빡하는 경우 발생
- `Docstring`은 코드의 특정 컴포턴트(모듈, 클래스, 메서드, 함수)에 대한 문서화
    - 가능한 많이 추가하자
    - 특히 파이썬의 경우 동적으로 타입을 결정하기 때문에 `Docstring`을 통해 이러한 정보를 명시하면 향후 다른 개발자가 쉽게 이해할 수 있다.


- autodicstring?
- 정적검사. 소스코드를 돌리지 않고 오류가 있는지 확인하는 방법
- 동적 타입에 크게 다칠 수도 있다. 
- 위험성이 있다. 빠

- 클린코드란? for, if 문 코드 돌아가는거는 돌아가는데 어떻게 쓰이느냐에 따라 


```python
dic.update??
Docstring:
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
In either case, this is followed by: for k in F:  D[k] = F[k]
Type:      method_descriptor
```

- 객체의 \_\_doc\_\_ 속성을 통해서도 접근이 가능하다. 

```python
def my_function():
	"""임의의 계산 수행"""
	return None

# my_function.__doc__ 
# 임의의 계산 수행
```

### Annotation

- 코드 사용자에게 함수 인자로 어떤 값이 와야 하는지 힌트를 주자는 것. 파이썬 3.6 부터는 함수 parameter와 리턴 타입뿐만 아니라 변수에 직접 주석을 달 수 있다. 

```python
class Point:
	def __init__(self, lat, long):
		self.lat = lat
		self.long = long
	
def locate(latitude: float, longtitude: float) -> Point:
	""" 맵에서 좌표에 해당하는 객체를 검색 """

locate.__annotations__
# {'latitude': float, 'longtitude': float, 'return': __main__.Point}
```

### Annotations은 Docstring을 대체하는 것일까?

- 대체가 아닌 서로 보완하는 관계
- 입출력 값을 더 잘 이해시키기 위해 Docstring을 적을 수 있다. 

### 기본 품질 향상을 위한 도구 설정

- Mypy -> hinting 정적 검사
- Pylint -> pep8 기준대로 검사
- Black -> 자기 기준대로 검사
- Makefile -> 위 도구들을 묶어 자동 검사를 할 수 있음

## pr-template

기본적으로 동적 타입 언어로 모든 곳에 강제함으로써 굳이 동적 타이핑의 장점을 포기해야하나?
개발 초기에는 타입 힌트를 사용하지 않으면서 빠르게 코드를 발전시키고, 후반부에는 코드 테스트를 통해 타입으로 인한 문제가 예상되는 곳에만 국소적으로 타입 힌트를 적용하는 편이 더욱 바람직해 보임. 



### 여러가지 python formatter
- [https://velog.io/@city7310/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C-%ED%8F%AC%EB%A7%A4%ED%84%B0-%EC%9D%B4%EC%95%BC%EA%B8%B0-5wjxdei9iv](https://velog.io/@city7310/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C-%ED%8F%AC%EB%A7%A4%ED%84%B0-%EC%9D%B4%EC%95%BC%EA%B8%B0-5wjxdei9iv)