---  
layout: post  
title: "[Python] 모음 사전"  
subtitle: "[Python] 모음 사전"  
categories: Algorithm
tags: 문제풀이 정렬 이진탐색
comments: true  
---  

## [모음 사전](https://programmers.co.kr/learn/courses/30/lessons/84512)

## 문제 설명

사전에 알파벳 모음 'A', 'E', 'I', 'O', 'U'만을 사용하여 만들 수 있는, 길이 5 이하의 모든 단어가 수록되어 있습니다. 사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA"이며, 마지막 단어는 "UUUUU"입니다.

단어 하나 word가 매개변수로 주어질 때, 이 단어가 사전에서 몇 번째 단어인지 return 하도록 solution 함수를 완성해주세요.

## 제한사항
- word의 길이는 1 이상 5 이하입니다.
- word는 알파벳 대문자 'A', 'E', 'I', 'O', 'U'로만 이루어져 있습니다.

## 입출력 예

![모음사전1](https://yunsikus.github.io/assets/img/post_img/모음사전1.jpg)

## 입출력 예 설명
### 입출력 예 #1

사전에서 첫 번째 단어는 "A"이고, 그다음은 "AA", "AAA", "AAAA", "AAAAA", "AAAAE", ... 와 같습니다. "AAAAE"는 사전에서 6번째 단어입니다.

### 입출력 예 #2

"AAAE"는 "A", "AA", "AAA", "AAAA", "AAAAA", "AAAAE", "AAAAI", "AAAAO", "AAAAU"의 다음인 10번째 단어입니다.

### 입출력 예 #3

"I"는 1563번째 단어입니다.

### 입출력 예 #4

"EIO"는 1189번째 단어입니다.


## 풀이

파이썬의 sort()함수로 string의 알파벳을 사전순으로 정렬할 수 있습니다. 일단 모든 경우의 알파벳 조합을 하나의 리스트에 담고 정렬 후 인덱스를 리턴합니다. 이때, list의 index함수(`O(N)`)를 쓰는 것보다 이진 탐색(`O(log(N)`)을 통해 시간복잡도를 줄일 수 있습니다. 

```python
from bisect import bisect_left
from itertools import product

def index_of_x(a, x):
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    return None

def solution(word):
    alpha_list =[''.join(list(j)) for i in range(1,6) for j in product(['A','E','I','O','U'], repeat=i)]    
    alpha_list.sort()
    
    return index_of_x(alpha_list,word) + 1
```