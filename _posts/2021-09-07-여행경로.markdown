---  
layout: post  
title: "[Python] 여행 경로"  
subtitle: "[Python] 여행 경로"  
categories: Algorithm
tags: 문제풀이 DFS 재귀 Recursion
comments: true  
---  

## [여행 경로](https://programmers.co.kr/learn/courses/30/lessons/43164)

## 문제 설명

주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 "ICN" 공항에서 출발합니다.

항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

## 제한사항

- 모든 공항은 알파벳 대문자 3글자로 이루어집니다.
- 주어진 공항 수는 3개 이상 10,000개 이하입니다.
- tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.
- 주어진 항공권은 모두 사용해야 합니다.
- 만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.
- 모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.

## 입출력 예

![여행경로1](https://yunsikus.github.io/assets/img/post_img/여행경로1.jpg)

## 입출력 예 설명

### 예제 #1

["ICN", "JFK", "HND", "IAD"] 순으로 방문할 수 있습니다.

### 예제 #2

["ICN", "SFO", "ATL", "ICN", "ATL", "SFO"] 순으로 방문할 수도 있지만 ["ICN", "ATL", "ICN", "SFO", "ATL", "SFO"] 가 알파벳 순으로 앞섭니다.
"EIO"는 1189번째 단어입니다.


## 풀이
DFS와 재귀를 통해 풀 수 있습니다. dfs함수는 3개의 인자를 받습니다.

- `tickets` : 사용할 수 있는 티켓 목록 
- `path` : 거쳐간 경로를 저장하기 위한 변수
- `start` : 여행 시작 경로

1) 반환 조건은 path의 길이가 N+1과 같아질때 입니다. 

2) 사용할 수 있는 티켓 목록중에서 start로 시작하는 티켓을 가져옵니다. 
   
   - 1) 이때 사용한 티켓을 제거한 새로운 ticket 목록을 copy로 만듭니다. (`rest_ticket`)
   
   - 2) path에 start로 시작하는 티켓의 목적지를 추가합니다.
   
   - 3) start를 티켓의 목적지로 변경하여 다시 dfs를 호출합니다. 

3) 가능한 경로가 2개 이상인 경우에는 알파벳 순서가 앞서는 경로를 return해야 합니다. 따라서 sort 해줍니다. 

```python
import copy

def solution(tickets):
    N = len(tickets)
    hubo = []
    
    def dfs(tickets,path,start):
        if len(path) == N+1:
            hubo.append(path)
            return 

        for i,p in enumerate(tickets):
            if p[0] == start:
                rest_ticket = copy.deepcopy(tickets)
                rest_ticket.pop(i)
                dfs(rest_ticket, path+[p[1]], p[1])
                
    dfs(tickets,['ICN'],'ICN')
    hubo.sort()
    return hubo[0]
```