---
layout: post
title: "[Python] 방문길이"
subtitle: "[Python] 방문길이"
categories: Algorithm
tags: 문제풀이 Set
comments: true
---

## [프로그래머스 방문길이](https://programmers.co.kr/learn/courses/30/lessons/49994)

## 문제

게임 캐릭터를 4가지 명령어를 통해 움직이려 합니다. 명령어는 다음과 같습니다.

- U: 위쪽으로 한 칸 가기
- D: 아래쪽으로 한 칸 가기
- R: 오른쪽으로 한 칸 가기
- L: 왼쪽으로 한 칸 가기

캐릭터는 좌표평면의 (0, 0) 위치에서 시작합니다. 좌표평면의 경계는 왼쪽 위(-5, 5), 왼쪽 아래(-5, -5), 오른쪽 위(5, 5), 오른쪽 아래(5, -5)로 이루어져 있습니다.

![방문길이1](https://bernard-choi.github.io/assets/img/post_img/방문길이1.jpg)

예를 들어, "ULURRDLLU"로 명령했다면

![방문길이2](https://bernard-choi.github.io/assets/img/post_img/방문길이2.jpg)

- 1번 명령어부터 7번 명령어까지 다음과 같이 움직입니다.

![방문길이3](https://bernard-choi.github.io/assets/img/post_img/방문길이3.jpg)

- 8번 명령어부터 9번 명령어까지 다음과 같이 움직입니다.

![방문길이4](https://bernard-choi.github.io/assets/img/post_img/방문길이4.jpg)

이때, 우리는 게임 캐릭터가 지나간 길 중 캐릭터가 처음 걸어본 길의 길이를 구하려고 합니다. 예를 들어 위의 예시에서 게임 캐릭터가 움직인 길이는 9이지만, 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다. (8, 9번 명령어에서 움직인 길은 2, 3번 명령어에서 이미 거쳐 간 길입니다)

단, 좌표평면의 경계를 넘어가는 명령어는 무시합니다.

예를 들어, "LULLLLLLU"로 명령했다면

![방문길이5](https://bernard-choi.github.io/assets/img/post_img/방문길이5.jpg)

- 1번 명령어부터 6번 명령어대로 움직인 후, 7, 8번 명령어는 무시합니다. 다시 9번 명령어대로 움직입니다.

![방문길이6](https://bernard-choi.github.io/assets/img/post_img/방문길이6.jpg)

이때 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다.

명령어가 매개변수 dirs로 주어질 때, 게임 캐릭터가 처음 걸어본 길의 길이를 구하여 return 하는 solution 함수를 완성해 주세요.

## 제한사항

- dirs는 string형으로 주어지며, 'U', 'D', 'R', 'L' 이외에 문자는 주어지지 않습니다.
- dirs의 길이는 500 이하의 자연수입니다.

## 입출력 예

![방문길이7](https://bernard-choi.github.io/assets/img/post_img/방문길이7.jpg)

## 입출력 예 설명

문제에 나온 예와 같습니다.

## 풀이

- 각 방향별로 x와 y축에 더해져야할 값을 저장합니다. (`DELTAS`)
- 이동했던 방향을 기록하기 위해 `visited_paths`를 set()으로 선언합니다.
  - set()을 사용한 이유는 같은 값이 들어올 때 이를 중복 처리하기 위함입니다.
- 현재 위치를 `cur_position`으로 선언
- commands를 입력받아 각 command마다 다음을 수행합니다.
  - command에 맞게 `DELTAS`에서 dx와 dy를 뽑습니다.
  - `cur_position`에 dx와 dy를 더하여 `next_postion`을 선언합니다.
  - x나 y가 -5나 5를 초과해서는 안되기 때문에 `next_position`이 해당 조건을 만족하는 지 검사합니다. 만족하지 못하면 다음 command로 넘어갑니다.
  - 검사 후 `visited_path`에 (현재 포지션, 다음 포지션) 그리고 (다음 포지션, 현재 포지션)을 저장합니다. 이렇게 저장해야 방향이 달라도 같은 방향으로 인식시킬 수 있습니다.
- `visited_path` 리스트 길이를 반으로 나눈 값을 반환합니다.


```python
def solution(commands):
    visited_paths = set()
    cur_position = (0, 0)
    DELTAS = {'U': (1, 0), 'D': (-1, 0), 'L': (0, -1), 'R': (0, 1)}

    for command in commands:
        dx, dy = DELTAS[command]
        next_position = (cur_position[0] + dx, cur_position[1] + dy)
        if not valid_coord(*next_position):
            continue

        visited_paths.add((cur_position, next_position))
        visited_paths.add((next_position, cur_position))

        cur_position = next_position

    return len(visited_paths) // 2

def valid_coord(x, y):
    return -5 <= x <= 5 and -5 <= y <= 5
```
