---  
layout: post
title: "[Effective Python] 16장. 리스트를 반환하는 대신 제너레이터를 고려하자"
subtitle: "[Effective Python] 16장"  
categories: Python
tags: 파이썬코딩의기술
comments: true  
---  
## 16. 리스트를 반환하는 대신 제너레이터를 고려하자.

일련의 결과를 생성하는 함수에서 택할 가장 간단한 방법은 아이템의 리스트를 반환하는 것. 예를 들어 문자열에 있는 모든 단어의 인덱스를 츨력하고 싶다고 하자.

```python
def index_words(text):
  result = []
  if text:
    result.append(0)
  for index, letter in enumerate(text):
    if letter == ' ':
      result.append(index + 1)
  return result
```

샘플 입력이 몇개 뿐일때는 함수가 기대한 대로 동작한다.
```python
address = 'Four score and seven years ago...'
result = index.words(address)
print(result[:3]) ## [0, 5, 11]
```

하지만 index_words 함수에는 두 가지 문제가 있다.
첫번째 문제는 코드가 약간 복잡하고 깔끔하지 않다는 점이다. 새로운 결과가 나올 떄마다 append메소드를 호출해야한다.

이 함수를 작성하는 더 좋은 방법은 제너레이터를 사용하는 것이다. 제너레이터는 yield 표현식을 사용하는 함수다. 제너레이터 함수는 호출되면 실제로 실행되지 않고 바로 이터레이터(iterator)를 반환한다. iterator와 generator에 대해서 알아보자.

## Iterator
그럼 이터레이터랑 무엇인가? 이는 next()를 호출할 때 다음값을 생성해내는 상태를 가진 헬퍼 객체이다. next()를 가진 모든 객체는 이터레이터이다. 값을 생성해내는 방법과는 무관하다.

즉 이터레이터는 값 생성기이다. "다음" 값을 요청할 때마다 내부 상태를 유지하고 있기 때문에 다음값을 계산하는 방법을 알고 있다.

이터레이터의 예시는 셀 수 없이 많다. itertools의 모든 함수는 이터레이터를 반환한다. 이터레이터의 내부 구조를 좀 더 잘 이해하기 위해 피보나치수를 생성하는 이터레이터를 만들어보자.
```python
class fib:
    def __init__(self):
        self.prev = 0
        self.curr = 1

    def __iter__(self):
        return self # 현재 인스턴스를 반환

    def __next__(self):
        value = self.curr
        self.curr += self.prev
        self.prev = value
        return value
f = fib()
list(islice(f, 0, 10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
```

next()를 호출할때마다 두 가지 중요한 작업이 수행된다.
1. 다음 next() 호출을 위해 상태를 변경한다.
2. 현재 호출에 대한 결과값을 생성한다.

## Generator
제너레이터는 특별한 종류의 이터레이터이다. 제너레이터를 사용하면 위 에시의 피보나치 시퀀스 이터레이터와 같은 이터레이터를 만들 수 있지만 iter() 와 next() 메서드로 클래스를 작성하는걸 피하는 우아하고 간결한 문법을 사용한다.

- 모든 제너레이터는 이터레이터이다.
- 모든 제너레이터는 게으른 팩토리이다. (값을 그때 그때 생성한다.)

다음은 제너레이터로 작성된 동일한 피보나치 시퀀스 팩토리이다.
```python
def fib():
    prev, curr = 0, 1
    while True:
      yield curr
      prev, curr = curr, prev + curr
f = fib()
list(islice(f, 0, 10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
```
